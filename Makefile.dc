RM	= rm -f

CDROM_OBJ=src/cdrom/dc.o
ifndef FAME_C_CORE
FAME_OBJ=src/68k/fame/fame.o
FAME_SRC=src/68k/fame/fame.s
endif

DREAMCAST=YES

include config.mk


ifndef AES
ifdef MENU
OBJS+=romdisk.o
endif
endif

TARGET = $(NAME)

ifdef AES
KOS_CFLAGS= -Isrc/mmu_file/kos-patch/kernel/arch/dreamcast/include -O3 -fomit-frame-pointer -ml -m4-single-only -fno-optimize-sibling-calls -I$(KOS_BASE)/include -I$(KOS_BASE)/addons/include -I$(KOS_BASE)/kernel/arch/dreamcast/include -D_arch_dreamcast -D_arch_sub_pristine -Wall -g -fno-builtin -fno-strict-aliasing

KOS_LDFLAGS = -Lsrc/mmu_file/kos-patch/lib/dreamcast -Lsrc/mmu_file/kos-patch/addons/lib/dreamcast -ml -m4-single-only -Wl,-Ttext=0x8c010000 -nostartfiles -nostdlib -L$(KOS_BASE)/lib/dreamcast -L$(KOS_BASE)/addons/lib/dreamcast
endif

KOS_CFLAGS+= -I$(KOS_BASE)/addons/include/SDL -I$(KOS_BASE)/addons/include

INLINE='static __inline__'

KOS_CFLAGS+= -DDREAMCAST -DSDL -Isrc -Isrc/68k -Isrc/video -DROM_PREFIX="/cd" -DMEMCARD_PREFIX="/vmu/a1/"

ifndef MENU
KOS_CFLAGS+=-DDATA_PREFIX="/cd"
else
ifdef AES
KOS_CFLAGS+=-DDATA_PREFIX="/cd/neo4all/"
else
KOS_CFLAGS+=-DDATA_PREFIX="/rd/"
endif
endif

KOS_CFLAGS+=$(NEO4ALL_CFLAGS)
KOS_CPPFLAGS+=$(KOS_CFLAGS)

all: $(TARGET).elf

include $(KOS_BASE)/Makefile.rules

src/z80/faze/raze.s: src/z80/faze/raze.s.m4
	m4 -Isrc/z80/faze/ src/z80/faze/raze.s.m4 > src/z80/faze/raze.s

src/z80/faze/raze.o: src/z80/faze/raze.s

ifdef VIDEOGL
LIB_SDL= -lSDL_mixer_126 -lSDL_image_124 -lSDL_gl_1213 -lkglx -lpng_128 -lz_123
else
LIB_SDL= -lSDL_mixer_126 -lSDL_image_124 -lSDL_1213 -lpng_128 -lz_123
endif

$(TARGET).elf: $(OBJS) $(Z80_OBJS) $(MEMORY_OBJ) $(OBJS_68K)
	$(KOS_CC) $(KOS_CFLAGS) $(KOS_LDFLAGS) -o $(TARGET).elf $(KOS_START) \
	$(OBJS) $(OBJS_68K) $(MEMORY_OBJ) $(Z80_OBJS) $(LIB_SDL) $(OBJEXTRA) -lm $(KOS_LIBS)

$(TARGET).bin: $(TARGET).elf
	$(KOS_OBJCOPY) -R .stack -O binary $(TARGET).elf $(TARGET).bin

romdisk.o: romdisk.img
	$(KOS_BASE)/utils/bin2o/bin2o romdisk.img romdisk romdisk.o
#	bin2odc romdisk.img romdisk.o

romdisk.img:
	$(KOS_GENROMFS) -f romdisk.img -d data -v

ifdef AES
run: $(TARGET).bin
else
#run: $(TARGET).bin example.iso
run: $(TARGET).bin
endif
#	$(KOS_LOADER) $(TARGET).bin 
#	$(KOS_LOADER) $(TARGET).bin -n
	$(KOS_LOADER) $(TARGET).bin -i example.iso

clean:
	$(RM) $(OBJS) src/68k/c68k/cpu68k.o src/z80/z80intrf.o src/z80/faze/raze.s $(MEMORY_OBJ) $(TARGET).elf $(TARGET).bin  romdisk.o romdisk.img
	$(RM) $(Z80_OBJS) $(OBJS_68K)
	
